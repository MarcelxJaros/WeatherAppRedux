import axios from 'axios';
import getGeoData from '../GetGeoData'; // Update the path to match your project structure

jest.mock('axios'); // Mock the axios module

describe('getGeoData', () => {
  it('fetches geo data correctly', async () => {
    // Mocked response data
    const city = 'Berlin';
    const mockedResponse = {
      'name': 'Berlin',
      'local_names': {
        'ur': 'برلن',
        'ro': 'Berlin',
        'na': 'Berlin',
        'sq': 'Berlini',
        'lg': 'Berlin',
        'br': 'Berlin',
        'ko': '베를린',
        'wo': 'Berlin',
        'ie': 'Berlin',
        'oc': 'Berlin',
        'os': 'Берлин',
        'gv': 'Berleen',
        'ba': 'Берлин',
        'yo': 'Berlin',
        'lb': 'Berlin',
        'my': 'ဘာလင်မြို့',
        'te': 'బెర్లిన్',
        'ky': 'Берлин',
        'kv': 'Берлин',
        'it': 'Berlino',
        'ka': 'ბერლინი',
        'eu': 'Berlin',
        'kn': 'ಬೆರ್ಲಿನ್',
        'mt': 'Berlin',
        'am': 'በርሊን',
        'rm': 'Berlin',
        'tr': 'Berlin',
        'tg': 'Берлин',
        'de': 'Berlin',
        'an': 'Berlín',
        'fi': 'Berliini',
        'uk': 'Берлін',
        'su': 'Berliini',
        'mr': 'बर्लिन',
        'mg': 'Berlin',
        'fa': 'برلین',
        'gn': 'Berlin',
        'el': 'Βερολίνο',
        'nl': 'Berlijn',
        'en': 'Berlin',
        'gd': 'Berlin',
        'pl': 'Berlin',
        'ty': 'Berlin',
        'ca': 'Berlín',
        'lt': 'Berlynas',
        'li': 'Berlien',
        'ps': 'برلين',
        'ru': 'Берлин',
        'io': 'Berlin',
        'fy': 'Berlyn',
        'sc': 'Berlinu',
        'pt': 'Berlim',
        'ia': 'Berlin',
        'cy': 'Berlin',
        'ab': 'Берлин',
        'ga': 'Beirlín',
        'sr': 'Берлин',
        'ug': 'Bérlin',
        'be': 'Берлін',
        'gl': 'Berlín',
        'sl': 'Berlin',
        'sk': 'Berlín',
        'bo': 'པེ་ལིང་',
        'ar': 'برلين',
        'ku': 'Berlîn',
        'co': 'Berlinu',
        'mk': 'Берлин',
        'hi': 'बर्लिन',
        'tl': 'Berlin',
        'mi': 'Pearīni',
        'bi': 'Berlin',
        'fo': 'Berlin',
        'kw': 'Berlin',
        'es': 'Berlín',
        'bn': 'বার্লিন',
        'bg': 'Берлин',
        'ta': 'பெர்லின்',
        'az': 'Berlin',
        'th': 'เบอร์ลิน',
        'ja': 'ベルリン',
        'cv': 'Берлин',
        'ml': 'ബെര്‍ലിന്',
        'eo': 'Berlino',
        'af': 'Berlyn',
        'sw': 'Berlin',
        'qu': 'Berlin',
        'he': 'ברלין',
        'si': 'බර්ලිනය',
        'sh': 'Berlin',
        'iu': 'ᐱᕐᓖᓐ',
        'cs': 'Berlín',
        'la': 'Berolinum',
        'ms': 'Berlin',
        'sv': 'Berlin',
        'so': 'Berlin',
        'tt': 'Берлин',
        'uz': 'Berlin',
        'hr': 'Berlin',
        'ht': 'Bèlen',
        'id': 'Berlin',
        'is': 'Berlín',
        'bs': 'Berlin',
        'yi': 'בערלין',
        'nn': 'Berlin',
        'zh': '柏林',
        'no': 'Berlin',
        'cu': 'Берлинъ',
        'zu': 'Berlin',
        'fr': 'Berlin',
        'lv': 'Berlīne',
        'vi': 'Berlin',
        'jv': 'Berlin',
        'et': 'Berliin',
        'se': 'Berlin',
        'hu': 'Berlin',
        'ln': 'Berlin',
        'mn': 'Берлин',
        'da': 'Berlin',
        'hy': 'Բեռլին',
        'kk': 'Берлин',
      },
      'lat': 52.5170365,
      'lon': 13.3888599,
      'country': 'DE',
    };
    // Type the axios mock
    const mockedAxios = axios as jest.Mocked<typeof axios>;

    // Set up axios mock to return the mocked response
    mockedAxios.get.mockResolvedValue(mockedResponse);

    // Call the function and await the response
    const result = await getGeoData(city);

    // Assertions
    expect(result).toEqual(mockedResponse); // Check if the response matches the mocked data
    expect(mockedAxios.get).toHaveBeenCalledWith('https://api.openweathermap.org/geo/1.0/direct', {
      params: {
        q: city,
        appid: '8bd71818d4ce90bc1d4ffd65a3856d9e',
      },
    });
  });
});
